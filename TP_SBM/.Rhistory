a=sapply(c(1:Q),function(i) c(tree_genet[which(paramEstimSBM$Z==q),which(paramEstimSBM$Z==q)]))
Q=5
a=sapply(c(1:Q),function(i) c(tree_genet[which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
a
image(t(Adj_ord)[n:1,])
a=a[-which(x==0)]
a
a=sapply(c(1:Q),function(i) c(tree_genet[which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
a=a[-which(a==0)]
a=sapply(c(1:Q),function(i) a=c(tree_genet[which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]) a=a[-which(a==0)])
Group_Covar=sapply(c(1:Q),function(i) a=c(tree_genet[which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
Group_Covar[[1]]
Group_Covar[[1]][1]
Group_Covar[[1]][2]
Group_Covar=sapply(c(1:Q),function(i) Group_Covar=Group_Covar[[i]][-which(a==0)])
Group_Covar=sapply(c(1:Q),function(i) Group_Covar=Group_Covar[[i]][-which(Group_Covar==0)])
i=3
Group_Covar[[i]]
Group_Covar=sapply(c(1:Q),function(i) Group_Covar=Group_Covar[[i]][-which(Group_Covar[[i]][]==0)])
Group_Covar
Group_mean=sapply(c(1:Q),function(i) mean(Group_Covar))
Group_mean=sapply(c(1:Q),function(i) mean(Group_Covar[[i]]))
Group_mean
tree_genet = read.table("FungiTree/tree_genetic.txt")
tree_genet = as.matrix(tree_genet)
tree_taxo = read.table("FungiTree/tree_taxo.txt")
tree_taxo = as.matrix(tree_taxo)
tree_geo = read.table("FungiTree/tree_geo.txt")
tree_geo = as.matrix(tree_geo)
ListVar=list(tree_genet,tree_taxo,tree_geo)
for(j in 1: 3)
{
Group_Covar[j]=sapply(c(1:Q),function(i) a=c(ListVar[j][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
Group_Covar[j]=sapply(c(1:Q),function(i) Group_Covar=Group_Covar[[i]][-which(Group_Covar[[i]][]==0)])
Group_mean[j]=sapply(c(1:Q),function(i) mean(Group_Covar[[i]]))
}
ListVar[j][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]
ListVar[1]
i=1
ListVar[j][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]
ListVar[1][2]
ListVar[1][]
ListVar[1][1:2]
ListVar[1][[1:2]
]
for(j in 1: 3)
{
Group_Covar[j]=sapply(c(1:Q),function(i) a=c(ListVar[j][[which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
Group_Covar[j]=sapply(c(1:Q),function(i) Group_Covar=Group_Covar[[i]][-which(Group_Covar[[i]][]==0)])
Group_mean[j]=sapply(c(1:Q),function(i) mean(Group_Covar[[i]]))
}
for(j in 1: 3)
{
Group_Covar[j]=sapply(c(1:Q),function(i) a=c(ListVar[j][[which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]])
Group_Covar[j]=sapply(c(1:Q),function(i) Group_Covar=Group_Covar[[i]][-which(Group_Covar[[i]][]==0)])
Group_mean[j]=sapply(c(1:Q),function(i) mean(Group_Covar[[i]]))
}
c(ListVar[j][[which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]]
for(j in 1: 3)
{
Group_Covar[j]=sapply(c(1:Q),function(i) c(ListVar[j][[which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]]))
Group_Covar[j]=sapply(c(1:Q),function(i) Group_Covar=Group_Covar[[i]][-which(Group_Covar[[i]][]==0)])
Group_mean[j]=sapply(c(1:Q),function(i) mean(Group_Covar[[i]]))
}
for(j in 1: 3)
{
Group_Covar[j]=sapply(c(1:Q),function(i) c(ListVar[j][[which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]]))
Group_Covar[j]=sapply(c(1:Q),function(i) Group_Covar=Group_Covar[[i]][-which(Group_Covar[[i]][]==0)])
Group_mean[j]=sapply(c(1:Q),function(i) mean(Group_Covar[j][[i]]))
}
Group_Covar[j]
sapply(c(1:Q),function(i) c(ListVar[j][[which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]]))
)j=1
j=1
i=1
c(ListVar[j][[which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]])
which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)
ListVar[j]
c(ListVar[j][[which(paramEstimSBM$Z==i)]])
ListVar[j][[which(paramEstimSBM$Z==i)]]
which(paramEstimSBM$Z==i)
head(ListVar[j])
ListVar[j][1:2]
ListVar[j][[1:2]]
ListVar[j][[1,3]]
class(ListVar[j])
class(ListVar[j][[]])
ListVar
j=2
ListVar[j]
dim(ListVar[j])
ListVar[j][1,1]
ListVar[j][[]]
ListVar[j][[1]]
ListVar[j][[1]][1,2]
ListVar[j][[1]][1:2,2:5]
ListVar[j][[2]][1:2,2:5]
c(ListVar[j][[1]][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)])
Group_Covar[j]=sapply(c(1:Q),function(i) c(ListVar[j][[1]][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
Group_Covar[j]=sapply(c(1:Q),function(i) c(ListVar[j][[1]][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
c(ListVar[j][[1]][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)])
Group_Covar[j]
# creer une liste taille nbr covar
for(j in 1: 3)
{
Group_Covar[j]=sapply(c(1:Q),function(i) c(ListVar[j][[1]][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
Group_Covar[j]=sapply(c(1:Q),function(i) Group_Covar[j]=Group_Covar[j][-which(Group_Covar[j]==0)])
Group_mean[j]=sapply(c(1:Q),function(i) mean(Group_Covar[j]))
}
ListVar
j=2
i=1
c(ListVar[j][[1]][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)])
# creer une liste taille nbr covar
Group_Covar=list()
Group_Covar[j]=sapply(c(1:Q),function(i) c(ListVar[j][[1]][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
j
sapply(c(1:Q),function(i) c(ListVar[j][[1]][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
Listvar[1]
ListVar[1]
ListVar[2]
Group_Covar[j]=sapply(c(1:Q),function(i) c(ListVar[j][[1]][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
sapply(c(1:Q),function(i) c(ListVar[j][[1]][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
Group_Covar[j][[]]=sapply(c(1:Q),function(i) c(ListVar[j][[1]][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
tree_taxo
x=c(tree_taxo[which(paramEstimSBM$Z==q),which(paramEstimSBM$Z==q))
x=x[-which(x==0)]
mean(x)
q=1
x=c(tree_taxo[which(paramEstimSBM$Z==q)
,which(paramEstimSBM$Z==q)])
x
x=x[-which(x==0)]
mean(x )
floor(mean(x))
lbm <- BM_bernoulli("LBM",as.matrix(fungi_tree))
lbm$estimate()
Q = which.max(lbm$ICL)
Q
lbm$ICL
lbm[[8]]
lbm$model_parameters[[8]]
lbm$model_name
paramEstimLBM <- extractParamBM(lbm,Q)
paramEstimLBM$piRow
paramEstimLBM$piCol
paramEstimLBM$alpha
paramEstimLBM$ZRow
paramEstimLBM$ZCol
sbm.tree_bin <- BM_bernoulli("SBM",tree_bin)
sbm.tree_bin$estimate()
sbm.tree_bin$ICL
tree_list= readt.table("nouvelles data/Tree_species_list")
tree_list= read.table("nouvelles data/Tree_species_list")
tree_list= read.table("nouvelles_data/Tree_species_list")
setwd("~/Dropbox/Formation_NGB (1)")
tree_list= read.table("nouvelles_data/Tree_species_list")
tree_list= read.table("nouvelles_data/Tree_species_list.csv")
tree_list= read.table("nouvelles_data/Tree_species_list.csv", sep=";")
tree_list
fungi_list= read.table("nouvelles_data/Fungal_species_list.csv", sep=";")
fungi_list=fungi_list[,2]
fungi_list
data_list=list(fungi_tree, tree)
data_list
fungi_tree = read.table("FungiTree/fungi_tree_interactions.txt")
fungi_tree = fungi_tree[-dim(fungi_tree)[1],
-dim(fungi_tree)[2]]
tree = t(as.matrix(fungi_tree)) %*% as.matrix(fungi_tree)
diag(tree) <- 0
tree_bin = tree
tree_bin[tree > 1] = 1
tree_genet = read.table("FungiTree/tree_genetic.txt")
tree_genet = as.matrix(tree_genet)
tree_taxo = read.table("FungiTree/tree_taxo.txt")
tree_taxo = as.matrix(tree_taxo)
tree_geo = read.table("FungiTree/tree_geo.txt")
tree_geo = as.matrix(tree_geo)
ListVar=list(tree_genet,tree_taxo,tree_geo)
tree_list= read.table("nouvelles_data/Tree_species_list.csv", sep=";")
tree_list=tree_list[,2]
fungi_list= read.table("nouvelles_data/Fungal_species_list.csv", sep=";")
fungi_list=fungi_list[,2]
data_list=list(fungi_tree, tree, tree_bin, ListVar, tree_list, fungi_list)
# liste avec fungi_tree, tree, tree_bin, ListVar, tree_list, fungi_list
save(data_list,file='fungi_tree.Rdata')
load("data_list.Rdata")
load("fungi_tree.Rdata")
fungi_tree
a=load("fungi_tree.Rdata")
a
a$tree
fungi_tree = read.table("FungiTree/fungi_tree_interactions.txt")
fungi_tree = fungi_tree[-dim(fungi_tree)[1],
-dim(fungi_tree)[2]]
tree = t(as.matrix(fungi_tree)) %*% as.matrix(fungi_tree)
diag(tree) <- 0
tree_bin = tree
tree_bin[tree > 1] = 1
tree_genet = read.table("FungiTree/tree_genetic.txt")
tree_genet = as.matrix(tree_genet)
tree_taxo = read.table("FungiTree/tree_taxo.txt")
tree_taxo = as.matrix(tree_taxo)
tree_geo = read.table("FungiTree/tree_geo.txt")
tree_geo = as.matrix(tree_geo)
ListVar=list(tree_genet,tree_taxo,tree_geo)
tree_list= read.table("nouvelles_data/Tree_species_list.csv", sep=";")
tree_list=tree_list[,2]
fungi_list= read.table("nouvelles_data/Fungal_species_list.csv", sep=";")
fungi_list=fungi_list[,2]
# data_list=list(fungi_tree, tree, tree_bin, ListVar, tree_list, fungi_list)
# liste avec fungi_tree, tree, tree_bin, ListVar, tree_list, fungi_list
save(data_list,file='fungi_tree_data.Rdata')
fungi_tree = read.table("FungiTree/fungi_tree_interactions.txt")
fungi_tree = fungi_tree[-dim(fungi_tree)[1],
-dim(fungi_tree)[2]]
tree = t(as.matrix(fungi_tree)) %*% as.matrix(fungi_tree)
diag(tree) <- 0
tree_bin = tree
tree_bin[tree > 1] = 1
tree_genet = read.table("FungiTree/tree_genetic.txt")
tree_genet = as.matrix(tree_genet)
tree_taxo = read.table("FungiTree/tree_taxo.txt")
tree_taxo = as.matrix(tree_taxo)
tree_geo = read.table("FungiTree/tree_geo.txt")
tree_geo = as.matrix(tree_geo)
ListVar=list(tree_genet,tree_taxo,tree_geo)
tree_list= read.table("nouvelles_data/Tree_species_list.csv", sep=";")
tree_list=tree_list[,2]
fungi_list= read.table("nouvelles_data/Fungal_species_list.csv", sep=";")
fungi_list=fungi_list[,2]
fungi_tree_data= list(Name='data_list', fungi_tree=fungi_tree, tree=tree, tree_bin=tree_bin, ListVar=ListVar, tree_list=tree_list, fungi_list=fungi_list)
# liste avec fungi_tree, tree, tree_bin, ListVar, tree_list, fungi_list
save(fungi_tree_data,file='fungi_tree_data.Rdata')
x=load("fungi_tree_data.Rdata")
x
x$tree_list
x[1]
x[1][[]]
load('fungi_tree_data.Rdata')
dim(tree_fungi)
install.packages("alluvial")
rm(list())
rm(list=ls())
install.packages(sbm)
install.packages("sbm")
library(ggplot2)
library(knitr)
install.packages("sbm")
library(ggplot2)
library(network)
library(RColorBrewer)
K = 3;
nbNodes  <- 50
blockProp <- c(.25, 0.5 ,.25) # group proportions
connectParam <- list(mean = diag(.4, 3) + 0.05) # connectivity matrix: affiliation network
mySampler <- sampleSimpleSBM(nbNodes, blockProp, directed = TRUE, connectParam,dimLabels = 'Species', model = 'bernoulli')
mySampler <- sampleSimpleSBM(nbNodes, blockProp = blockProp, connectParam = connectParam , model = 'bernoulli',directed = TRUE, , dimLabels = 'Species')
library(sbm)
mySampler <- sampleSimpleSBM(nbNodes, blockProp = blockProp, connectParam = connectParam , model = 'bernoulli',directed = TRUE, dimLabels = 'Species')
mySampler
colSet <- brewer.pal(n = 8, name = "Set2")
rawNet <- ggnet2(mySampler$networkData,label = TRUE,color=colSet2[1]) + mythemeTransp
library(sbm)
library(ggplot2)
library(network)
library(GGally)
library(RColorBrewer)
colSet <- brewer.pal(n = 8, name = "Set2")
rawNet <- ggnet2(mySampler$networkData,label = TRUE,color=colSet2[1]) + mythemeTransp
colSet <- brewer.pal(n = 8, name = "Set2")
rawNet <- ggnet2(mySampler$networkData,label = TRUE,color=colSet[1]) + mythemeTransp
colSet <- brewer.pal(n = 8, name = "Set2")
rawNet <- ggnet2(mySampler$networkData,label = TRUE,color=colSet[1])
rawNet
plotMyMatrix(mySampler$networkData,dimLabels = list(row = "species", col = "species"),plotOptions=list(colNames = TRUE, rowNames = TRUE))
colSet <- RColorBrewer::brewer.pal(n = 8, name = "Set2")
GGally::ggnet2(mySampler$networkData,label = TRUE,color=colSet[1])
sbm::plotMyMatrix(mySampler$networkData,dimLabels = list(row = "species", col = "species"),plotOptions=list(colNames = TRUE, rowNames = TRUE))
library(ggnet2)Z <- mySampler$memberships[U]
Z <- mySampler$memberships[U]
Z <- mySampler$memberships[U]
U <- order(mySampler$memberships)
U
myMat <- myMat[U,U]
myMat <- mySampler$networkData[U,U]
net = network(myMat, directed = TRUE)
my_color_nodes_col <- my_color_nodes <- rep(colSet[1],nbNodes)
for (k in 2:K){
my_color_nodes[nbNodes-which(Z==k) + 1] <- colSet[k]
my_color_nodes_col[which(Z==k)] <- colSet[k]
}
Z <- mySampler$memberships[U]
Z
U
Z <- mySampler$memberships[U]
U <- order(mySampler$memberships)
Z <- mySampler$memberships[U]
myMat <- mySampler$networkData[U,U]
net = network(myMat, directed = TRUE)
my_color_nodes_col <- my_color_nodes <- rep(colSet[1],nbNodes)
for (k in 2:K){
my_color_nodes[nbNodes-which(Z==k) + 1] <- colSet[k]
my_color_nodes_col[which(Z==k)] <- colSet[k]
}
PlotNet <- ggnet2(net,node.color =  Z, palette = "Set2",label = TRUE,arrow.size = 6, arrow.gap = 0.017,label.size = 3) +  mythemeTransp
ggnet2(net,node.color =  Z, palette = "Set2",label = TRUE,arrow.size = 6, arrow.gap = 0.017,label.size = 3)
plotOptions <- list(colNames = TRUE, rowNames = TRUE)
sbm::plotMyMatrix(mySampler$networkData,dimLabels = list(row = "species", col = "species"),plotOptions)
mySampler$networkData
U <- order(mySampler$memberships)
Z <- mySampler$memberships[U]
myMat <- mySampler$networkData[U,U]
net = network(myMat, directed = TRUE)
my_color_nodes_col <- my_color_nodes <- rep(colSet[1],nbNodes)
for (k in 2:K){
my_color_nodes[nbNodes-which(Z==k) + 1] <- colSet[k]
my_color_nodes_col[which(Z==k)] <- colSet[k]
}
ggnet2(net,node.color =  Z, palette = "Set2",label = TRUE,arrow.size = 6, arrow.gap = 0.017,label.size = 3)
PlotMatrix <- plotMyMatrix(myMat,dimLabels = list(row = "species", col = "species"),plotOptions = plotOptions)+ theme(axis.text.x = element_text(color=my_color_nodes_col),axis.text.y = element_text(color=my_color_nodes))
PlotMatrix
help("sampleBipartiteSBM")
means
K = 3;  # nb of blocks
L = 4
nbNodes  <- c(50,80) # nb of vertices
blockProp <- list(row = c(.25, 0.5 ,.25),col=c(0.1,0.3,0.4,0.2)) # group proportions
connectParam <- list(mean = diag(.4, 3) + 0.05) # connectivity matrix: affiliation network
means <- matrix(rbinom(6, 30, 0.25), 2, 3)  # connectivity matrix
connectParam <- list(mean = means)
mySampler <- sampleBipartiteSBM(nbNodes, blockProp, connectParam, model = 'poisson')
means <- matrix(rbinom(K*L, 30, 0.25), K, L)  # connectivity matrix
means
means[3,2] = means[1,4] = 0
connectParam <- list(mean = means)
mySampler <- sampleBipartiteSBM(nbNodes, blockProp, connectParam, model = 'poisson')
library(sbm)
library(ggplot2)
library(network)
library(GGally)
library(RColorBrewer)
library(knitr)
mySimpleSBM <- tree_tree_binary %>%
estimateSimpleSBM("bernoulli",
dimLabels ='tree',
estimOptions = list(verbosity = 0, plot=TRUE))
load(file ='allResultsTreeFungus.rda')
plotMyMatrix(tree_tree_binary, dimLabels = list(row = 'tree', col = 'tree'))
tree_tree_binary <- 1 * (fungusTreeNetwork$tree_tree != 0)
mySimpleSBM <- tree_tree_binary %>%
estimateSimpleSBM("bernoulli",
dimLabels ='tree',
estimOptions = list(verbosity = 0, plot=TRUE))
class(mySimpleSBM)
mySimpleSBM$nbBlocks
mySimpleSBM$nbNodes
mySimpleSBM$nbCovariates
plot(mySimpleSBM, type = "data", dimLabels = list(row = 'tree', col = 'tree'))
plot(mySimpleSBM, type = "expected", dimLabels = list(row = 'tree', col = 'tree'),estimOptions=list(legend=TRUE))
plot(mySimpleSBM, type = "meso",
dimLabels = list(row = 'tree', col = 'tree'),
plotOptions = list(edge.width = 1.2))
remotes::install_github("Jo-Theo/shinySbm")
shinySbm::run_app()
ggnet2()
help(ggnet2)
mySimpleSBM$connectParam$mean
alphahat <- mySimpleSBM$connectParam$mean
alphahat <- mySimpleSBM$connectParam$mean
mySimpleSBM$dimLabels
paste(mySimpleSBM$dimLabels,mySimpleSBM$nbBlocks)
rownames(alphahat) <- paste(mySimpleSBM$dimLabels,1:mySimpleSBM$nbBlocks)
rownames(alphahat)
colnames(alphahat) <- rownames(alphahat) <- paste(mySimpleSBM$dimLabels,1:mySimpleSBM$nbBlocks)
help("network")
Meso <- network(alphahat,vertex.attrnames = paste(mySimpleSBM$dimLabels,1:mySimpleSBM$nbBlocks) )
Meso
Meso <- network(alphahat,vertex.attrnames = paste(mySimpleSBM$dimLabels,1:mySimpleSBM$nbBlocks) ,directed  = FALSE,vertex.attr = mySimpleSBM$probMemberships)
Meso <- network(alphahat,vertex.attrnames = paste(mySimpleSBM$dimLabels,1:mySimpleSBM$nbBlocks) ,directed  = FALSE)
ggnet2(Meso, label = TRUE, shape = 15)
ggnet2(Meso, label = TRUE)
x = network.vertex.names(Meso)
x
Meso %v% 'prob' <- mySimpleSBM$probMemberships
Meso %e% 'prob' <- alphahat
Meso
ggnet2(Meso, edge.size = "prob")
ggnet2(Meso, edge.size = "prob", edge.label = "prob")
Meso <- Meso %e% 'prob' <- round(alphahat,2)
ggnet2(Meso, edge.size = "prob", edge.label = "prob")
Meso <- Meso %e% 'prob' <- round(alphahat,2)
Meso <- network(alphahat,vertex.attrnames = paste(mySimpleSBM$dimLabels,1:mySimpleSBM$nbBlocks) ,directed  = FALSE)
ggnet2(Meso, label = TRUE)
Meso <- Meso %e% 'prob' <- round(alphahat,2)
ggnet2(Meso, edge.size = "prob", edge.label = "prob")
Meso
Meso <- network(alphahat,vertex.attrnames = paste(mySimpleSBM$dimLabels,1:mySimpleSBM$nbBlocks) ,directed  = FALSE)
Meso
Meso <- network(alphahat,vertex.attrnames = paste(mySimpleSBM$dimLabels,1:mySimpleSBM$nbBlocks) ,directed  = FALSE)
ggnet2(Meso, label = TRUE)
Meso %e% 'prob' <- round(alphahat,2)
ggnet2(Meso, edge.size = "prob", edge.label = "prob")
Meso <- network(alphahat,vertex.attrnames = paste(mySimpleSBM$dimLabels,1:mySimpleSBM$nbBlocks) ,directed  = FALSE)
ggnet2(Meso, label = TRUE)
Meso %e% 'prob' <- round(alphahat,2)*(alphat>0.1)
Meso %e% 'prob' <- round(alphahat,2)*(alphahat>0.1)
ggnet2(Meso, edge.size = "prob", edge.label = "prob")
Meso <- network(alphahat,vertex.attrnames = paste(mySimpleSBM$dimLabels,1:mySimpleSBM$nbBlocks) ,directed  = FALSE)
ggnet2(Meso, label = TRUE)
round(alphahat,2)*(alphahat>0.1)
Meso %e% 'prob' <- round(alphahat,2)*(alphahat>0.1)
ggnet2(Meso, edge.size = "prob", edge.label = "prob")
alphahat <- mySimpleSBM$connectParam$mean
alphahat <- 1* (alphahat>0.1)
colnames(alphahat) <- rownames(alphahat) <- paste(mySimpleSBM$dimLabels,1:mySimpleSBM$nbBlocks)
Meso <- network(alphahat,vertex.attrnames = paste(mySimpleSBM$dimLabels,1:mySimpleSBM$nbBlocks) ,directed  = FALSE)
ggnet2(Meso, label = TRUE)
Meso %e% 'prob' <- round(alphahat,2)*(alphahat>0.1)
ggnet2(Meso, edge.size = "prob", edge.label = "prob")
Meso %e% 'prob' <- round(mySimpleSBM$connectParam$mean,2)*(alphahat)
alphahat <- mySimpleSBM$connectParam$mean
alphahat <- 1* (alphahat>0.1)
colnames(alphahat) <- rownames(alphahat) <- paste(mySimpleSBM$dimLabels,1:mySimpleSBM$nbBlocks)
Meso <- network(alphahat,vertex.attrnames = paste(mySimpleSBM$dimLabels,1:mySimpleSBM$nbBlocks) ,directed  = FALSE)
ggnet2(Meso, label = TRUE)
Meso %e% 'prob' <- round(mySimpleSBM$connectParam$mean,2)*(alphahat)
ggnet2(Meso, edge.size = "prob", edge.label = "prob")
ggnet2(Meso, edge.size = "prob", edge.label = "prob",label = TRUE)
help("network")
Meso <- network(alphahat,vertex.attrnames = paste(mySimpleSBM$dimLabels,1:mySimpleSBM$nbBlocks) ,directed  = FALSE,loops = TRUE)
ggnet2(Meso, label = TRUE)
Meso %e% 'prob' <- round(mySimpleSBM$connectParam$mean,2)*(alphahat)
ggnet2(Meso, edge.size = "prob", edge.label = "prob",label = TRUE)
remotes::install_github()
plot(mySimpleSBM, type = "expected", dimLabels = list(row = 'tree', col = 'tree'),estimOptions=list(legend=TRUE))
plot(mySimpleSBM, type = "expected", dimLabels = list(row = 'tree', col = 'tree'),estimOptions=list(legend=TRUE))
plot(mySimpleSBM, type = "meso",
plotOptions = list(edge.width = 1.2))
plot(mySimpleSBM, type = "expected",estimOptions=list(legend=TRUE))
rm(list=ls())
library(sbm)
library(GGally)
library(network)
library(RColorBrewer)
library(ggpubr)
pathtodata <- paste0(getwd(),'/data')
my_files <- list.files(pathtodata)
food_webs <- lapply(
X = seq_along(my_files),
FUN = function(i) {
df <- read.csv(file = paste0(pathtodata,"/",my_files[i]), header = TRUE, row.names = 1)
A <- as.matrix(df)
return(list(
net = A,
nr = nrow(A),
nc = ncol(A),
dens = mean(A),
id = stringr::str_sub(my_files[i], 1, -5))
)
}
)
site_names <- c("Martins (M)", "Cooper (NC)", "Herlzier (NC)", "Venlaw (NC)",
"Berwick (NZ)", "North Col. (NZ)", "Powder (NZ)", "Trib. C (NZ)" )
names(food_webs)<- site_names
library(sbm)
library(ggplot2)
library(network)
library(GGally)
library(RColorBrewer)
library(knitr)
data(multipartiteEcologicalNetwork)
data(multipartiteEcologicalNetwork)
Net <- multipartiteEcologicalNetwork
type = "bipartite"
model = "bernoulli"
directed = FALSE
PlantFlovis <- defineSBM(Net$Inc_plant_flovis, model, type, directed, dimLabels = c("Plants",
"Flovis"))
PlantAnt <- defineSBM(Net$Inc_plant_ant, model, type, directed, dimLabels = c("Plants",
"Ants"))
PlantBird <- defineSBM(Net$Inc_plant_bird, model, type, directed, dimLabels = c("Plants",
"Birds"))
plotMyMultipartiteMatrix(list(PlantFlovis, PlantAnt, PlantBird))
data(multipartiteEcologicalNetwork)
estimOptions = list(initBM = FALSE)
listSBM <- list(PlantFlovis, PlantAnt, PlantBird)
myMSBM <- estimateMultipartiteSBM(listSBM, estimOptions)
plot(myMSBM)
remote::install_github("Chabert-Liddell/colSBM")
remotes::install_github("Chabert-Liddell/colSBM")
library(colSBM)
library(patchwork)
data("foodwebs")
# global_opts = list(nb_cores = 1L,
#                    nb_models = 5L,
#                    nb_init = 10L,
#                    depth = 2L,
#                    verbosity = 1,
#                    spectral_init = FALSE,
#                    Q_max = 8L,
#                    plot_details = 1)
set.seed(1234)
res_fw_iid <- estimate_colSBM(netlist = foodwebs[1:3], # A list of networks
colsbm_model = "iid", # The name of the model
directed = TRUE, # Foodwebs are directed networks
net_id = names(foodwebs)[1:3], # Name of the networks
nb_run = 1L, # Number of runs of the algorithm
global_opts = list(verbosity = 0,
plot_details = 0,
Q_max = 8) #Max number of clusters
)
