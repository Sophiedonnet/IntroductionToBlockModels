setwd("~/WORK/RECHERCHE/FORMATIONS_CHERCHEURS/FORMATIONS_RESEAUX/IntroductionToBlockModels/TP_SBM/pgm")
setwd("~/WORK/RECHERCHE/FORMATIONS_CHERCHEURS/FORMATIONS_RESEAUX/IntroductionToBlockModels/TP_SBM/pgm")
library(sbm)
library(ggplot2)
library(knitr)
data("fungusTreeNetwork")
str(fungusTreeNetwork,  max.level = 1)
tree_tree_binary <- 1 * (fungusTreeNetwork$tree_tree != 0)
mySimpleSBM <- tree_tree_binary %>%
estimateSimpleSBM("bernoulli", dimLabels = list(row = 'tree', col = 'tree'), estimOptions = list(verbosity = 0, plot=FALSE))
mySimpleSBMPoisson <- tree_tree %>%
estimateSimpleSBM("poisson", estimOptions = list(verbosity = 0),dimLabels = c('tree','tree'))
tree_tree <- fungusTreeNetwork$tree_tree
mySimpleSBMPoisson <- tree_tree %>%
estimateSimpleSBM("poisson", estimOptions = list(verbosity = 0),dimLabels = c('tree','tree'))
mySimpleSBMCov<- estimateSimpleSBM(netMat = as.matrix(tree_tree),model = 'poisson',directed =FALSE,dimLabels =list(row='tree',col='tree'), covariates  = fungusTreeNetwork$covar_tree,estimOptions = list(verbosity = 0))
myBipartiteSBM <- estimateBipartiteSBM(netMat = as.matrix(fungusTreeNetwork$fungus_tree),model = 'bernoulli',dimLabels=list(row = 'fungis',col = 'tree'),estimOptions = list(verbosity = 0))
save(myBipartiteSBM, mySimpleSBM, mySimpleSBMPoisson, mySimpleSBMCov, file = 'allResultsTreeFungus.rda')
getwd()
setwd("~/WORK/RECHERCHE/FORMATIONS_CHERCHEURS/FORMATIONS_RESEAUX/IntroductionToBlockModels/TP_SBM/pgm")
mySimpleSBMCov<- estimateSimpleSBM(netMat = as.matrix(tree_tree),model = 'poisson',directed =FALSE,dimLabels =list(row='tree',col='tree'), covariates  = fungusTreeNetwork$covar_tree,estimOptions = list(verbosity = 0))
mySimpleSBMCov<- estimateSimpleSBM(netMat = as.matrix(tree_tree),model = 'poisson',directed =FALSE,dimLabels =list(row='tree',col='tree'), covariates  = fungusTreeNetwork$covar_tree,estimOptions = list(verbosity = 0,plot = TRUE))
plot(myBipartiteSBM, type = "meso")
plot(myBipartiteSBM, type = "meso",plotOptions = list(nodes.size=0.3))
plot(myBipartiteSBM, type = "meso",plotOptions = list(node.size=0.3))
plot(myBipartiteSBM, type = "meso",plotOptions = list(vertex.size=0.3))
plot(myBipartiteSBM, type = "meso",plotOptions = list(vertex.size=c(0.3,5))
plot(myBipartiteSBM, type = "meso",plotOptions = list(vertex.size=c(2,5))
plot(myBipartiteSBM, type = "meso",plotOptions = list(vertex.size=c(2,5)))
plot(myBipartiteSBM, type = "meso",plotOptions = list(vertex.size=c(2,2)))
plot(myBipartiteSBM, type = "meso",plotOptions = list(vertex.size=c(2,1)))
plot(myBipartiteSBM, type = "meso",plotOptions = list(vertex.size=c(2,0.6)))
plot(myBipartiteSBM, type = "meso",plotOptions = list(vertex.size=c(2,0.4)))
plot(myBipartiteSBM, type = "meso",plotOptions = list(vertex.size=c(2,0.4), edge.width  = 1)
plot(myBipartiteSBM, type = "meso",plotOptions = list(vertex.size=c(2,0.4), edge.width  = 1))
plot(myBipartiteSBM, type = "meso",plotOptions = list(vertex.size=c(2,0.4), edge.width  = 1)))
plot(myBipartiteSBM, type = "meso",plotOptions = list(vertex.size=c(2,0.4), edge.width  = 1)))
lotOptions = list(vertex.size=c(2,0.4), edge.width  = 1)
plotOptions = list(vertex.size=c(2,0.4), edge.width  = 1)
plot(myBipartiteSBM, type = "meso",plotOptions = list(vertex.size=c(2,0.4), edge.width  = 1))
plot(myBipartiteSBM, type = "meso",plotOptions = list(vertex.size=c(2,0.4), edge.width  = 1.5))
plot(myBipartiteSBM, type = "meso",plotOptions = list(vertex.size=c(2,0.4), edge.width  = 4))
help("plot.SBM")
plot(myBipartiteSBM, type = "meso",plotOptions = list(vertex.size=c(2,0.4), edge.width  = 4,vertex.label.dist = 2))
plot(myBipartiteSBM, type = "meso",plotOptions = list(vertex.size=c(2,0.4), edge.width  = 4,vertex.label.dist = c(2,2))
)
plot(myBipartiteSBM, type = "meso",plotOptions = list(vertex.size=c(2,0.4), edge.width  = 4)
)
plot(myBipartiteSBM, type = "meso",plotOptions = list(vertex.size=c(2,0.4), edge.width  = 4))
setwd("~/WORK_ALL/RECHERCHE/FORMATION_RECHERCHE/FORMATION_RESEAUX/IntroductionToBlockModels/TP_SBM/pgm")
libray(sbm)
library(sbm)
data("fungusTreeNetwork")
str(fungusTreeNetwork,  max.level = 1)
fungusTreeNetwork$fungus_tree
tree_tree
plotMyMatrix(tree_tree_binary, dimLabels = list(row = 'tree', col = 'tree'))
data("fungusTreeNetwork")
str(fungusTreeNetwork,  max.level = 1)
data("fungusTreeNetwork")
str(fungusTreeNetwork,  max.level = 1)
tree_tree_binary <- 1 * (fungusTreeNetwork$tree_tree != 0)
is.matrix(tree_tree_binary)
dim(tree_tree_binary)
tree_tree_binary[1:10,1:10]
plotMyMatrix(tree_tree_binary, dimLabels = list(row = 'tree', col = 'tree'))
mySimpleSBM <- tree_tree_binary %>%
estimateSimpleSBM("bernoulli",
dimLabels = list(row = 'tree', col = 'tree'),
estimOptions = list(verbosity = 1, plot= TRUE))
class(mySimpleSBM)
mySimpleSBM
mySimpleSBM$dimension
mySimpleSBM$modelName
mySimpleSBM$nbNodes
mySimpleSBM$nbBlocks
mySimpleSBM$nbCovariates
mySimpleSBM$nbstore
mySimpleSBM$storedModels
mySimpleSBM$directed
plot(mySimpleSBM, type = "data", dimLabels = list(row = 'tree', col = 'tree'))
plot(mySimpleSBM, type = "expected",
dimLabels = list(row = 'tree', col = 'tree'))
plot(mySimpleSBM, type = "meso",
dimLabels = list(row = 'tree', col = 'tree'),
plotOptions = list(edge.width = 1.2))
plot(mySimpleSBM, type = "meso",
dimLabels = list(row = 'tree', col = 'tree'),
plotOptions = list(edge.width = 1.2,vertex.size = 1.3))
plot(mySimpleSBM, type = "meso",
dimLabels = list(row = 'tree', col = 'tree'),
plotOptions = list(edge.width = 1.2,vertex.size = 1.5))
plot(mySimpleSBM, type = "meso",
dimLabels = list(row = 'tree', col = 'tree'),
plotOptions = list(edge.width = 1.1,vertex.size = 1.5))
plot(mySimpleSBM, type = "meso",
dimLabels = list(row = 'tree', col = 'tree'),
plotOptions = list(edge.width = 0.9,vertex.size = 1.5))
plot(mySimpleSBM, type = "meso",
dimLabels = list(row = 'tree', col = 'tree'),
plotOptions = list(edge.width = 0.5,vertex.size = 1.5))
mySimpleSBM$storedModels
mySimpleSBM$storedModels %>%
ggplot() +
aes(x = nbBlocks, y = ICL) + geom_line() + geom_point(alpha = 0.5)
library(ggplot2)
mySimpleSBM$storedModels %>%
ggplot() +
aes(x = nbBlocks, y = ICL) + geom_line() + geom_point(alpha = 0.5)
mySimpleSBM$setModel(4)
mySimpleSBM$nbBlcoks
mySimpleSBM$nbBlocks
mySimpleSBM$plot(type = 'expected')
mySimpleSBM$setModel(6)
mySimpleSBM$plot(type = 'expected')
mySimpleSBM$setModel(5)
tree_tree <- fungusTreeNetwork$tree_tree
plotMyMatrix(tree_tree, dimLabels = list(row = 'tree', col = 'tree'))
mySimpleSBMPoisson <- tree_tree %>%
estimateSimpleSBM("poisson",
estimOptions = list(verbosity = 0 , plot = TRUE),
dimLabels = c('tree','tree'))
mySimpleSBMPoisson
mySimpleSBMPoisson <- tree_tree %>%
estimateSimpleSBM("poisson",
estimOptions = list(verbosity = 6 , plot = TRUE),
dimLabels = c('tree','tree'))
mySimpleSBMPoisson$nbBlocks
mySimpleSBMPoisson$nbNodes
mySimpleSBMPoisson$nbCovariates
plot(mySimpleSBMPoisson, type = "data")
plot(mySimpleSBMPoisson, type = "expected")
plot(mySimpleSBMPoisson, type = "meso")
lapply(1:mySimpleSBMPoisson$nbBlocks,
function(q){fungusTreeNetwork$tree_names[mySimpleSBMPoisson$memberships == q]})
listMemberships <- list(binarySBM = mySimpleSBM$memberships)
listMemberships$weightSBM <- mySimpleSBMPoisson$memberships
plotAlluvial(listMemberships)
library(ggplot2)
library(knitr)
P <- plotAlluvial(listMemberships)
install.packages("blockmodels")
library(ggplot2)
library(knitr)
library(sbm)
library(ggplot2)
library(knitr)
data("fungusTreeNetwork")
str(fungusTreeNetwork,  max.level = 1)
tree_tree_binary <- 1 * (fungusTreeNetwork$tree_tree != 0)
plotMyMatrix(tree_tree_binary, dimLabels = list(row = 'tree', col = 'tree'))
mySimpleSBM <- tree_tree_binary %>%
estimateSimpleSBM("bernoulli",
dimLabels ='tree',
estimOptions = list(verbosity = 0, plot=FALSE))
class(mySimpleSBM)
mySimpleSBM
mySimpleSBM$nbBlocks
mySimpleSBM$nbNodes
mySimpleSBM$nbCovariates
plot(mySimpleSBM, type = "data", dimLabels = list(row = 'tree', col = 'tree'))
plot(mySimpleSBM, type = "expected",
dimLabels = list(row = 'tree', col = 'tree'))
plot(mySimpleSBM, type = "meso",
dimLabels = list(row = 'tree', col = 'tree'),
plotOptions = list(edge.width = 1.2))
mySimpleSBM$storedModels %>% kable()
mySimpleSBM$storedModels %>%
ggplot() +
aes(x = nbBlocks, y = ICL) + geom_line() + geom_point(alpha = 0.5)
mySimpleSBM$setModel(4)
mySimpleSBM$nbBlocks
mySimpleSBM$plot(type = 'expected')
mySimpleSBM$setModel(5)
tree_tree <- fungusTreeNetwork$tree_tree
plotMyMatrix(tree_tree, dimLabels = list(row = 'tree', col = 'tree'))
mySimpleSBMPoisson <- tree_tree %>%
estimateSimpleSBM("poisson",
estimOptions = list(verbosity = 0 , plot = FALSE),
dimLabels = c('tree','tree'))
mySimpleSBMPoisson <- tree_tree %>%
estimateSimpleSBM("poisson",
estimOptions = list(verbosity = 0 , plot = FALSE),
dimLabels = c('tree'))
class(mySimpleSBMPoisson)
mySimpleSBMPoisson
mySimpleSBMPoisson$nbBlocks
mySimpleSBMPoisson$nbNodes
mySimpleSBMPoisson$nbCovariates
plot(mySimpleSBMPoisson, type = "data")
plot(mySimpleSBMPoisson, type = "expected")
plot(mySimpleSBMPoisson, type = "meso")
lapply(1:mySimpleSBMPoisson$nbBlocks,
function(q){fungusTreeNetwork$tree_names[mySimpleSBMPoisson$memberships == q]})
listMemberships <- list(binarySBM = mySimpleSBM$memberships)
listMemberships$weightSBM <- mySimpleSBMPoisson$memberships
P <- plotAlluvial(listMemberships)
mySimpleSBMCov<- estimateSimpleSBM(
netMat = as.matrix(tree_tree),
model = 'poisson',
directed =FALSE,
dimLabels =list(row='tree',col='tree'),
covariates  = fungusTreeNetwork$covar_tree,
estimOptions = list(verbosity = 0))
mySimpleSBMCov<- estimateSimpleSBM(
netMat = as.matrix(tree_tree),
model = 'poisson',
directed =FALSE,
dimLabels =c('tree'),
covariates  = fungusTreeNetwork$covar_tree,
estimOptions = list(verbosity = 0))
mySimpleSBMCov$nbBlocks
mySimpleSBMCov$connnectParam
mySimpleSBMCov$blockProp
mySimpleSBMCov$memberships
mySimpleSBMCov$covarParam
lapply(1:mySimpleSBMCov$nbBlocks,function(q){fungusTreeNetwork$tree_names[mySimpleSBMCov$memberships == q]})
listMemberships <- list(binary = mySimpleSBM$memberships)
listMemberships$weighted <- mySimpleSBMPoisson$memberships
listMemberships$weightedCov <- mySimpleSBMCov$memberships
plotAlluvial(listMemberships)
plotMyMatrix(fungusTreeNetwork$fungus_tree, dimLabels=list(row = 'fungis',col = 'tree'))
myBipartiteSBM <- estimateBipartiteSBM(
netMat = as.matrix(fungusTreeNetwork$fungus_tree),
model = 'bernoulli',
dimLabels=list(row = 'fungis',col = 'tree'),
estimOptions = list(verbosity = 0))
myBipartiteSBM <- estimateBipartiteSBM(
netMat = as.matrix(fungusTreeNetwork$fungus_tree),
model = 'bernoulli',
dimLabels=c(row = 'fungis',col = 'tree'),
estimOptions = list(verbosity = 0))
myBipartiteSBM$nbNodes
myBipartiteSBM$nbBlocks
myBipartiteSBM$connectParam
plot(myBipartiteSBM, type = "data")
plot(myBipartiteSBM, type = "expected")
plot(myBipartiteSBM, type = "meso",
plotOptions = list(vertex.size=c(1,2) , edge.width  = 2))
