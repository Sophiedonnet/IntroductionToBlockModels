install.packages("sna")
install.packages("~/Bureau/cropanalysis_0.0.0.9000.tar.gz", repos = NULL, type = "source")
install.packages("vegan")
install.packages("purrr")
install.packages("dplyr")
install.packages("data.table")
install.packages("~/Bureau/cropanalysis_0.0.0.9000.tar.gz", repos = NULL, type = "source")
install.packages("tidyr")
install.packages("~/Bureau/cropanalysis_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(cropanalysis)
help("plotMatrix")
U <- covariatesDegreeCorrectedLBM(10, 5)
U
biclusteringLBM
n1
library(blockmodels)
install.packages("~/WORK_ALL/RECHERCHE/TRAVAUX_RECHERCHE/ThomasVanesseNicolas/package/cropanalysis_0.0.0.9000.tar.gz", repos = NULL, type = "source")
install.packages("roxygen2")
install.packages("devtools")
install.packages("devtools")
install.packages("curl")
install.packages("devtools", dependencies = TRUE)
install.packages("gh")
install.packages("devtools")
install.packages("blockmodels")
library(tidyverse)
install.packages("tidyverse")
library(alluvial)
install.packages(c("digest", "ggplot2", "mvtnorm", "pillar", "RcppArmadillo", "tibble"))
install.packages("mclust")
library(mclust)
help(mclust)
help(blockmodels)
library(blockmodels)
help(blockmodels)
BM_bernoulli
help("BM_bernoulli")
install.packages("huge")
library(huge)
help(hug)
help(huge)
huge.generator
set.seed(3)
myseed = 3
set.seed(myseed)
library(parallel)
detectCores-)
detectCores())
detectCores()
npc <- 30 # nodes per class
Q <- 3 # classes
n <- npc * Q # nodes
Z<-diag(Q)%x%matrix(1,npc,1)
P<-matrix(runif(Q*Q),Q,Q)
M<-1*(matrix(runif(n*n),n,n)<Z%*%P%*%t(Z)) ## adjacency matrix
## estimation
my_model <- BM_bernoulli("SBM",M )
library(blockmodels)
npc <- 30 # nodes per class
Q <- 3 # classes
n <- npc * Q # nodes
Z<-diag(Q)%x%matrix(1,npc,1)
P<-matrix(runif(Q*Q),Q,Q)
M<-1*(matrix(runif(n*n),n,n)<Z%*%P%*%t(Z)) ## adjacency matrix
## estimation
my_model <- BM_bernoulli("SBM",M )
my_model<- BM_bernoulli("SBM",M,verbosity=0,plotting==)
my_model<- BM_bernoulli("SBM",M,verbosity=0,plotting=="")
my_model<- BM_bernoulli("SBM",M,verbosity=0,plotting==")
)
my_model<- BM_bernoulli("SBM",M,verbosity=0,plotting==)
my_model<- BM_bernoulli("SBM",M,verbosity=0,plotting="")
my_model$estimate()
my_model$estimate()
confid
c(-0.0629, 0.0529)* 3600
sum(0:11)
11*10/2
12*11/2
install.packages("rGeos")
data(warpbreaks); attach(warpbreaks)
warpbreaks
x = 0:100
plot(x,floor(x/25)*25)
plot(x,ent(x/25)*25)
plot(x,ceil(x/25)*25)
plot(x,ceiling(x/25)*25)
plot(x,round(x/25)*25)
abline(v=c(0,25,50,75,100))
install.packages("survival")
install.packages("DAAG")
library(DAAG)
help(droughts)
boxplot(length ~ year, data=droughts)
boxplot(log(length) ~ year, data=droughts)
hist(droughts$length, main="Winnipeg Droughts", xlab="length (in days)")
hist(log(droughts$length), main="Winnipeg Droughts", xlab="length (in days, log scale)")
droughts
plot(droughts$year, droughts$length)
plot(droughts$year, droughts$length)
setwd("~/WORK_ALL/RECHERCHE/FORMATION_RECHERCHE/FORMATION_RESEAUX/2020_03_Ecostat/IntroductionToBlockModels_Ecostat/TP_SBM")
rm(list=ls())
load('fungi_tree_data.Rdata')
ls()
setwd("~/WORK_ALL/RECHERCHE/FORMATION_RECHERCHE/FORMATION_RESEAUX/2020_03_Ecostat/IntroductionToBlockModels_Ecostat/TP_SBM/pgm")
rm(list=ls())
load('fungi_tree_data.Rdata')
ls()
library(ggplot2)
library(igraph)
library(blockmodels)
library(alluvial)
source('function_for_blockmodels.R')
plotMatrix(Mat = tree_bin,rowFG = 'tree', colFG  = 'tree')
sbm.tree_bin <- BM_bernoulli("SBM_sym",tree_bin)
sbm.tree_bin$estimate()
save(sbm.tree_bin,file='res_sbm_tree_bin.Rdata')
Q = which.max(sbm.tree_bin$ICL)
Q
paramEstimSBM <- extractParamBM(sbm.tree_bin,Q)
paramEstimSBM$pi
paramEstimSBM$alpha
paramEstimSBM$Z
plotMatrix(tree_bin,'tree','tree', fileNameSave = NULL, clustering = list(row=paramEstimSBM$Z))
G <- graph_from_adjacency_matrix(paramEstimSBM$alpha, mode = c("undirected"), weighted = TRUE, diag = TRUE)
plot.igraph(G,vertex.size=paramEstimSBM$pi*100,edge.width=abs(E(G)$weight)*3,vertex.color=1:Q, layout=layout_nicely)
lapply(1:Q,function(q){tree_list[paramEstimSBM$Z == q]})
plotMatrix(Mat = tree,rowFG = 'tree', colFG  = 'tree')
sbm.tree <- BM_poisson("SBM_sym",tree)
sbm.tree$estimate()
save(sbm.tree,file='res_sbm_tree.Rdata')
sbm.cov <- BM_poisson_covariates("SBM_sym",tree, ListVar)
sbm.cov$estimate()
save(sbm.cov, file='res_sbm_cov.Rdata')
Q = which.max(sbm.cov$ICL)
Q
paramEstimSBMPoissonCov <- extractParamBM(sbm.cov,Q)
paramEstimSBMPoissonCov$pi
paramEstimSBMPoissonCov$lambda
paramEstimSBMPoissonCov$Z
paramEstimSBMPoissonCov$theta
plotMatrix(tree,'tree','tree', fileNameSave = NULL, clustering = list(row=paramEstimSBMPoissonCov$Z))
