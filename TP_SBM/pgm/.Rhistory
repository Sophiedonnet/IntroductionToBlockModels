alpha = c(1,1)
beta = c(2,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D3 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D3$fact <- as.factor(rep(c('A','B'),each = n))
D3$mod <- rep('same intercept',2*n)
#--------------------------------- AVEC sans interaction ---------------
alpha = c(1,1)
beta = c(4,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
#--------------------------------- AVEC sans interaction ---------------
alpha = c(1,1)
beta = c(4,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D4 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D4$fact <- as.factor(rep(c('A','B'),each = n))
D4$mod <- rep('simple regression',2*n)
Dtot <- cbind(D1,D2,D3,D4)
n <- 100
X <- runif(n,-5,5)
library(ggplot2)
#--------------------------------- AVEC interaction ---------------
alpha = c(1,0.5)
beta = c(2,3)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D1 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D1$fact <- as.factor(rep(c('A','B'),each = n))
D1$mod <- rep('inter',2*n)
#--------------------------------- AVEC sans interaction ---------------
alpha = c(1,4)
beta = c(2,2)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D2 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D2$fact <- as.factor(rep(c('A','B'),each = n))
D2$mod <- rep('add',2*n)
#--------------------------------- AVEC sans interaction ---------------
alpha = c(1,1)
beta = c(2,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D3 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D3$fact <- as.factor(rep(c('A','B'),each = n))
D3$mod <- rep('same intercept',2*n)
#--------------------------------- AVEC sans interaction ---------------
alpha = c(1,1)
beta = c(4,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D4 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D4$fact <- as.factor(rep(c('A','B'),each = n))
D4$mod <- rep('simple regression',2*n)
Dtot <- cbind(D1,D2,D3,D4)
g1 <- ggplot(D,aes(x = x,y = y, group = fact,fill = fact)) + geom_point(aes(colour = fact))+geom_smooth(method = "lm", aes(colour=fact))
g1 <- g1 + facet_wrap(~mod,nrow=2)
g1
g1 <- ggplot(Dtot,aes(x = x,y = y, group = fact,fill = fact)) + geom_point(aes(colour = fact))+geom_smooth(method = "lm", aes(colour=fact))
g1 <- g1 + facet_wrap(~mod,nrow=2)
g1
Dtot <- rbind(D1,D2,D3,D4)
Dtot$mod <- as.factor(Dtot$mod)
library(ggplot2)
g1 <- ggplot(Dtot,aes(x = x,y = y, group = fact,fill = fact)) + geom_point(aes(colour = fact))+geom_smooth(method = "lm", aes(colour=fact))
g1 <- g1 + facet_wrap(~mod,nrow=2)
g1
n <- 100
X <- runif(n,-5,5)
library(ggplot2)
#--------------------------------- AVEC interaction ---------------
alpha = c(1,0.5)
beta = c(2,3)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D1 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D1$fact <- as.factor(rep(c('A','B'),each = n))
D1$mod <- rep('inter',2*n)
#--------------------------------- Sans interaction ---------------
alpha = c(1,4)
beta = c(2,2)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D2 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D2$fact <- as.factor(rep(c('A','B'),each = n))
D2$mod <- rep('Additif',2*n)
n <- 100
X <- runif(n,0,10)
library(ggplot2)
#--------------------------------- AVEC interaction ---------------
alpha = c(1,0.5)
beta = c(2,3)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
D1 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D1$fact <- as.factor(rep(c('A','B'),each = n))
D1$mod <- rep('inter',2*n)
#--------------------------------- Additif ---------------
alpha = c(1,4)
beta = c(2,2)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D2 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D2$fact <- as.factor(rep(c('A','B'),each = n))
D2$mod <- rep('Additif',2*n)
alpha = c(1,1)
beta = c(2,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D3 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D3$fact <- as.factor(rep(c('A','B'),each = n))
D3$mod <- rep('Same intercept',2*n)
#---------------------------------  ---------------
alpha = c(1,1)
beta = c(4,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D4 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D4$fact <- as.factor(rep(c('A','B'),each = n))
D4$mod <- rep('Simple regression',2*n)
Dtot <- rbind(D1,D2,D3,D4)
Dtot$mod <- as.factor(Dtot$mod)
library(ggplot2)
g1 <- ggplot(Dtot,aes(x = x,y = y, group = fact,fill = fact)) + geom_point(aes(colour = fact))+geom_smooth(method = "lm", aes(colour=fact))
g1 <- g1 + facet_wrap(~mod,nrow=2)
g1
#--------------------------------- AVEC interaction ---------------
alpha = c(1,3)
beta = c(2,3)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D1 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D1$fact <- as.factor(rep(c('A','B'),each = n))
D1$mod <- rep('With interaction',2*n)
#--------------------------------- Additif ---------------
alpha = c(1,4)
beta = c(2,2)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D2 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D2$fact <- as.factor(rep(c('A','B'),each = n))
D2$mod <- rep('Additif',2*n)
alpha = c(1,1)
beta = c(2,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
D3 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D3$fact <- as.factor(rep(c('A','B'),each = n))
D3$mod <- rep('Same intercept',2*n)
beta = c(4,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D4$fact <- as.factor(rep(c('A','B'),each = n))
Dtot <- rbind(D1,D2,D3,D4)
Dtot$mod <- as.factor(Dtot$mod)
library(ggplot2)
g1 <- ggplot(Dtot,aes(x = x,y = y, group = fact,fill = fact)) + geom_point(aes(colour = fact))+geom_smooth(method = "lm", aes(colour=fact))
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
g1 <- g1 + facet_wrap(~mod,nrow=2)
D4$mod <- rep('Simple regression',2*n)
#---------------------------------  ---------------
alpha = c(1,1)
D4 <- data.frame(y = c(Y1,Y2),x = c(X,X))
g1
#--------------------------------- AVEC interaction ---------------
alpha = c(1,3)
beta = c(2,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D1 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D1$fact <- as.factor(rep(c('A','B'),each = n))
D1$mod <- rep('A. With interaction',2*n)
#--------------------------------- Additif ---------------
alpha = c(1,4)
beta = c(2,2)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D2 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D2$fact <- as.factor(rep(c('A','B'),each = n))
D2$mod <- rep('B. Additif',2*n)
alpha = c(1,1)
beta = c(2,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D3 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D3$fact <- as.factor(rep(c('A','B'),each = n))
D3$mod <- rep('Same intercept',2*n)
#---------------------------------  ---------------
alpha = c(1,1)
beta = c(4,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D4 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D4$fact <- as.factor(rep(c('A','B'),each = n))
D4$mod <- rep('Simple regression',2*n)
Dtot <- rbind(D1,D2,D3,D4)
n <- 100
X <- runif(n,0,10)
library(ggplot2)
#--------------------------------- AVEC interaction ---------------
alpha = c(1,3)
beta = c(2,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D1 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D1$fact <- as.factor(rep(c('A','B'),each = n))
D1$mod <- rep('A. With interaction',2*n)
#--------------------------------- Additif ---------------
alpha = c(1,4)
beta = c(2,2)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D2 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D2$fact <- as.factor(rep(c('A','B'),each = n))
D2$mod <- rep('B. Additif',2*n)
#--------------------------------- AVEC sans interaction ---------------
alpha = c(1,1)
beta = c(2,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D3 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D3$fact <- as.factor(rep(c('A','B'),each = n))
D3$mod <- rep('C. Same intercept',2*n)
#---------------------------------  ---------------
alpha = c(1,1)
beta = c(4,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D4 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D4$fact <- as.factor(rep(c('A','B'),each = n))
D4$mod <- rep('D. Simple regression',2*n)
Dtot <- rbind(D1,D2,D3,D4)
Dtot$mod <- as.factor(Dtot$mod)
library(ggplot2)
g1 <- ggplot(Dtot,aes(x = x,y = y, group = fact,fill = fact)) + geom_point(aes(colour = fact))+geom_smooth(method = "lm", aes(colour=fact))
g1 <- g1 + facet_wrap(~mod,nrow=2)
g1
#--------------------------------- AVEC interaction ---------------
alpha = c(-3,3)
beta = c(2,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D1 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D1$fact <- as.factor(rep(c('A','B'),each = n))
n <- 100
X <- runif(n,0,10)
library(ggplot2)
#--------------------------------- AVEC interaction ---------------
alpha = c(-3,3)
beta = c(2,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D1 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D1$fact <- as.factor(rep(c('A','B'),each = n))
D1$mod <- rep('A. With interaction',2*n)
#--------------------------------- Additif ---------------
alpha = c(1,4)
beta = c(2,2)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D2 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D2$fact <- as.factor(rep(c('A','B'),each = n))
D2$mod <- rep('B. Additif',2*n)
#--------------------------------- AVEC sans interaction ---------------
alpha = c(1,1)
beta = c(2,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D3 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D3$fact <- as.factor(rep(c('A','B'),each = n))
D3$mod <- rep('C. Same intercept',2*n)
#---------------------------------  ---------------
alpha = c(1,1)
beta = c(4,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D4 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D4$fact <- as.factor(rep(c('A','B'),each = n))
D4$mod <- rep('D. Simple regression',2*n)
Dtot <- rbind(D1,D2,D3,D4)
Dtot$mod <- as.factor(Dtot$mod)
library(ggplot2)
g1 <- ggplot(Dtot,aes(x = x,y = y, group = fact,fill = fact)) + geom_point(aes(colour = fact))+geom_smooth(method = "lm", aes(colour=fact))
g1 <- g1 + facet_wrap(~mod,nrow=2)
g1
n <- 100
X <- runif(n,0,10)
library(ggplot2)
#--------------------------------- AVEC interaction ---------------
alpha = c(2,-3)
beta = c(2,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D1 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D1$fact <- as.factor(rep(c('A','B'),each = n))
D1$mod <- rep('A. With interaction',2*n)
#--------------------------------- Additif ---------------
alpha = c(1,4)
beta = c(2,2)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D2 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D2$fact <- as.factor(rep(c('A','B'),each = n))
D2$mod <- rep('B. Additif',2*n)
#--------------------------------- AVEC sans interaction ---------------
alpha = c(1,1)
beta = c(2,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D3 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D3$fact <- as.factor(rep(c('A','B'),each = n))
D3$mod <- rep('C. Same intercept',2*n)
#---------------------------------  ---------------
alpha = c(1,1)
beta = c(4,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D4 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D4$fact <- as.factor(rep(c('A','B'),each = n))
D4$mod <- rep('D. Simple regression',2*n)
Dtot <- rbind(D1,D2,D3,D4)
Dtot$mod <- as.factor(Dtot$mod)
library(ggplot2)
g1 <- ggplot(Dtot,aes(x = x,y = y, group = fact,fill = fact)) + geom_point(aes(colour = fact))+geom_smooth(method = "lm", aes(colour=fact))
g1 <- g1 + facet_wrap(~mod,nrow=2)
g1
#--------------------------------- AVEC interaction ---------------
alpha = c(2,-3)
beta = c(2,4)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
D1 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D1$fact <- as.factor(rep(c('A','B'),each = n))
D1$mod <- rep('A. With interaction',2*n)
beta = c(2,2)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
#--------------------------------- Additif ---------------
alpha = c(1,10)
D2 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D2$fact <- as.factor(rep(c('A','B'),each = n))
D2$mod <- rep('B. Additif',2*n)
alpha = c(1,1)
beta = c(2,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D3 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D3$fact <- as.factor(rep(c('A','B'),each = n))
D3$mod <- rep('C. Same intercept',2*n)
#---------------------------------  ---------------
alpha = c(1,1)
beta = c(4,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D4 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D4$fact <- as.factor(rep(c('A','B'),each = n))
D4$mod <- rep('D. Simple regression',2*n)
Dtot <- rbind(D1,D2,D3,D4)
library(ggplot2)
Dtot$mod <- as.factor(Dtot$mod)
g1 <- ggplot(Dtot,aes(x = x,y = y, group = fact,fill = fact)) + geom_point(aes(colour = fact))+geom_smooth(method = "lm", aes(colour=fact))
g1 <- g1 + facet_wrap(~mod,nrow=2)
g1
n <- 100
X <- runif(n,0,10)
library(ggplot2)
#--------------------------------- AVEC interaction ---------------
alpha = c(2,-3)
beta = c(2,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D1 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D1$fact <- as.factor(rep(c('A','B'),each = n))
D1$mod <- rep('A. With interaction',2*n)
#--------------------------------- Additif ---------------
alpha = c(1,10)
beta = c(2,2)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D2 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D2$fact <- as.factor(rep(c('A','B'),each = n))
D2$mod <- rep('B. Additif',2*n)
#--------------------------------- AVEC sans interaction ---------------
alpha = c(1,1)
beta = c(2,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D3 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D3$fact <- as.factor(rep(c('A','B'),each = n))
D3$mod <- rep('C. Same intercept',2*n)
#---------------------------------  ---------------
alpha = c(1,1)
beta = c(4,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D4 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D4$fact <- as.factor(rep(c('A','B'),each = n))
D4$mod <- rep('D. Simple regression',2*n)
Dtot <- rbind(D1,D2,D3,D4)
Dtot$mod <- as.factor(Dtot$mod)
library(ggplot2)
g1 <- ggplot(Dtot,aes(x = x,y = y, group = fact,fill = fact)) + geom_point(aes(colour = fact))+geom_smooth(method = "lm", aes(colour=fact))
g1 <- g1 + facet_wrap(~mod,nrow=2)
g1
n <- 100
X <- runif(n,0,10)
library(ggplot2)
#--------------------------------- AVEC interaction ---------------
alpha = c(2,-3)
beta = c(2,4)
Y1  = alpha[1]+beta[1]*X + rnorm(n,0,1)
Y2  = alpha[2]+beta[2]*X + rnorm(n,0,1)
D1 <- data.frame(y = c(Y1,Y2),x = c(X,X))
D1$fact <- as.factor(rep(c('A','B'),each = n))
D1$mod <- rep('A. With interaction',2*n)
g1 <- ggplot(D1,aes(x = x,y = y, group = fact,fill = fact)) + geom_point(aes(colour = fact))+geom_smooth(method = "lm", aes(colour=fact))
g1
library(MASS)
head(CPUs)
library(MASS)
head(CPU)
knitr::opts_chunk$set(echo = TRUE)
head(cpus)
attach(cpus)
names(cpus)
attach(cpus)
names(cpus)
res_lm <- lm(perf~ syct + mmin + mmax + cach + chmin + chmax)
summary(res_lm)
install.packages("ggcorrplot")
library(janine)
library(rggm)     # GGM data generation
library(devtools)
install_github("jchiquet/janine")
install.packages("rlang")
install_github("jchiquet/janine")
library(devtools)
install_github("jchiquet/janine")
library(installr)
updateR()
updateR()
copy.packages.between.libraries("C:/PROGRA~1/R/R-3.5.2/library", "C:/PROGRA~1/R/R-3.6.3/library", ask = FALSE, keep_old = FALSE,do_NOT_override_packages_in_new_R = TRUE)
copy.packages.between.libraries("C:/PROGRA~1/R/R-3.5.2/library", "C:/PROGRA~1/R/R-3.6.3/library", ask = FALSE, keep_old = FALSE,do_NOT_override_packages_in_new_R = TRUE)
copy.packages.between.libraries("C:/PROGRA~1/R/R-3.5.2/library", "C:/PROGRA~1/R/R-3.6.3/library", ask = TRUE, keep_old = FALSE,do_NOT_override_packages_in_new_R = TRUE)
library(rggm)     # GGM data generation
library(corrplot)
library(devtools)
install_github("jchiquet/janine")
install.packages("digest")
install.packages(c("ade4", "ape", "aricode", "AsioHeaders", "assertive.code", "assertive.data", "assertive.data.uk", "assertive.data.us", "assertive.matrices", "assertive.models", "assertthat", "aster", "backports", "BayesLCA", "bayesplot", "BH", "bipartite", "blogdown", "bookdown", "broom", "Cairo", "callr", "car", "carData", "caTools", "checkmate", "class", "classInt", "cli", "clipr", "colorspace", "covr", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "devtools", "DiagrammeR", "dials", "DT", "e1071", "ellipsis", "evaluate", "FactoMineR", "fansi", "fields", "flextable", "forcats", "foreign", "fs", "gdtools", "GGally", "ggridges", "ggthemes", "gh", "git2r", "glue", "gmp", "gtable", "gtools", "haven", "highlight", "highr", "hms", "htmlwidgets", "httr", "imager", "infer", "ISOcodes", "jpeg", "jsonlite", "keras", "knitr", "lattice", "lava", "lazyeval", "leaps", "lifecycle", "lme4", "loo", "lubridate", "maptools", "markdown", "matrixStats", "mclust", "mcmc", "MCMCpack", "microbenchmark", "mime", "modelr", "mvtnorm", "network", "nlme", "nloptr", "nnet", "nycflights13", "officer", "openssl", "openxlsx", "pagedown", "parsnip", "pbkrtest", "pillar", "pkgbuild", "pkgdown", "plyr", "poweRlaw", "prettyunits", "pROC", "processx", "prodlim", "progress", "ps", "quantreg", "R6", "Rcpp", "RcppArmadillo", "RCurl", "recipes", "rematch2", "remotes", "reprex", "reshape2", "reticulate", "rgexf", "rmarkdown", "roxygen2", "RPushbullet", "rsample", "rsconnect", "RSpectra", "rstan", "rstanarm", "rstudioapi", "rvest", "scales", "selectr", "servr", "sf", "shiny", "shinyjs", "sna", "SnowballC", "sp", "spam", "sparklyr", "SparkR", "SparseM", "StanHeaders", "stringi", "survival", "sys", "tensorflow", "testthat", "threejs", "tibble", "tidymodels", "tidypredict", "tidytext", "tidyverse", "tinytex", "units", "usethis", "uuid", "vctrs", "VGAM", "visNetwork", "webshot", "whisker", "xaringan", "xfun", "XML", "xml2", "xtable", "xts", "yaml", "yardstick", "zoo"))
install.packages(c("ade4", "ape", "aricode", "AsioHeaders", "assertive.code", "assertive.data", "assertive.data.uk", "assertive.data.us", "assertive.matrices", "assertive.models", "assertthat", "aster", "backports", "BayesLCA", "bayesplot", "BH", "bipartite", "blogdown", "bookdown", "broom", "Cairo", "callr", "car", "carData", "caTools", "checkmate", "class", "classInt", "cli", "clipr", "colorspace", "covr", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "devtools", "DiagrammeR", "dials", "DT", "e1071", "ellipsis", "evaluate", "FactoMineR", "fansi", "fields", "flextable", "forcats", "foreign", "fs", "gdtools", "GGally", "ggridges", "ggthemes", "gh", "git2r", "glue", "gmp", "gtable", "gtools", "haven", "highlight", "highr", "hms", "htmlwidgets", "httr", "imager", "infer", "ISOcodes", "jpeg", "jsonlite", "keras", "knitr", "lattice", "lava", "lazyeval", "leaps", "lifecycle", "lme4", "loo", "lubridate", "maptools", "markdown", "matrixStats", "mclust", "mcmc", "MCMCpack", "microbenchmark", "mime", "modelr", "mvtnorm", "network", "nlme", "nloptr", "nnet", "nycflights13", "officer", "openssl", "openxlsx", "pagedown", "parsnip", "pbkrtest", "pillar", "pkgbuild", "pkgdown", "plyr", "poweRlaw", "prettyunits", "pROC", "processx", "prodlim", "progress", "ps", "quantreg", "R6", "Rcpp", "RcppArmadillo", "RCurl", "recipes", "rematch2", "remotes", "reprex", "reshape2", "reticulate", "rgexf", "rmarkdown", "roxygen2", "RPushbullet", "rsample", "rsconnect", "RSpectra", "rstan", "rstanarm", "rstudioapi", "rvest", "scales", "selectr", "servr", "sf", "shiny", "shinyjs", "sna", "SnowballC", "sp", "spam", "sparklyr", "SparkR", "SparseM", "StanHeaders", "stringi", "survival", "sys", "tensorflow", "testthat", "threejs", "tibble", "tidymodels", "tidypredict", "tidytext", "tidyverse", "tinytex", "units", "usethis", "uuid", "vctrs", "VGAM", "visNetwork", "webshot", "whisker", "xaringan", "xfun", "XML", "xml2", "xtable", "xts", "yaml", "yardstick", "zoo"))
setwd("D:/WORK_ALL/RECHERCHE/FORMATION_RECHERCHE/FORMATION_RESEAUX/2020_07_NGB_ECONET/TP_SBM/pgm")
rm(list=ls())
load('fungi_tree_data.Rdata')
ls()
library(devtools)
install_github("GrossSBM/GSBM")
library(GSBM)
source('function_for_blockmodels.R')
library(ggplot2)
library(igraph)
library(alluvial)
source('function_for_blockmodels.R')
plotMatrix(Mat = tree_bin,rowFG = 'tree', colFG  = 'tree')
sbm.tree_bin <- estimateSimpleSBM(
tree_bin,
model = "bernoulli", directed = FALSE
)
save(sbm.tree_bin,file='res_sbm_tree_bin.Rdata')
load(file = '../results/res_sbm_tree_bin.Rdata')
sbm.tree_bin$nb
sbm.tree_bin <- estimateSimpleSBM(
tree_bin,
model = "bernoulli", directed = FALSE
)
save(sbm.tree_bin,file='res_sbm_tree_bin.Rdata')
save(sbm.tree_bin,file='/results/res_sbm_tree_bin.Rdata')
save(sbm.tree_bin,file='results/res_sbm_tree_bin.Rdata')
save(sbm.tree_bin,file='../results/res_sbm_tree_bin.Rdata')
load(file = '../results/res_sbm_tree_bin.Rdata')
sbm.tree_bin$nbBlocks
sbm.tree_bin$nbBlocks
sbm.tree_bin$blockProp
sbm.tree_bin$connectParam$mu
sbm.tree_bin$memberships
plot(sbm.tree_bin,type = 'data',ordered = TRUE)
G <- graph_from_adjacency_matrix(sbm.tree_bin$connectParam$mu, mode = c("undirected"), weighted = TRUE, diag = TRUE)
plot.igraph(G,vertex.size=sbm.tree_bin$blockProp*100,edge.width=abs(E(G)$weight)*3,vertex.color=1:sbm.tree_bin$nbBlocks, layout=layout_nicely)
lapply(1:sbm.tree_bin$nbBlocks,function(q){tree_list[sbm.tree_bin$memberships == q]})
plotMatrix(Mat = tree,rowFG = 'tree', colFG  = 'tree')
sbm.tree <- estimateSimpleSBM(
tree,
model = "poisson", directed = FALSE
)
sbm.tree$nbBlocks
sbm.tree$blockProp
sbm.tree$connectParam$mu
sbm.tree$memberships
plot(sbm.tree, type = 'data',ordered = TRUE)
G <- graph_from_adjacency_matrix(sbm.tree$connectParam$mu, mode = c("undirected"), weighted = TRUE, diag = TRUE)
plot.igraph(G,vertex.size=sbm.tree$blockProp*100,edge.width=abs(E(G)$weight)*3,vertex.color=1:sbm.tree$nbBlocks, layout=layout_nicely)
lapply(1:sbm.tree$nbBlocks,function(q){tree_list[sbm.tree$memberships == q]})
A <- as.data.frame(table(sbm.tree_bin$memberships,sbm.tree$memberships))
colnames(A)=c('SBM Bern',"SBM Poisson","Freq")
w   <- which(A$Freq!=0)
A <- A[w,]
alluvial(A[,c(1,2)],freq=A$Freq)
sbm.cov <- estimateSimpleSBM(netMat =tree,model = 'poisson',directed =FALSE, covariates  = ListVar)
load(file='../results/res_sbm_cov.Rdata')
getwd()
setwd("D:/WORK_ALL/RECHERCHE/FORMATION_RECHERCHE/FORMATION_RESEAUX/IntroductionToBlockModels/TP_SBM/pgm")
